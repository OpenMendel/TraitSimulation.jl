var documenterSearchIndex = {"docs":
[{"location":"#Trait-Simulation-Tutorial-1","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"","category":"section"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"Authors: Sarah Ji, Janet Sinsheimer, Kenneth Lange","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"CurrentModule = TraitSimulation","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"Modules = [TraitSimulation]","category":"page"},{"location":"#TraitSimulation.simulate-Tuple{Array{T,1} where T}","page":"Trait Simulation Tutorial","title":"TraitSimulation.simulate","text":"this for multiple GLM traits\n\n\n\n\n\n","category":"method"},{"location":"#TraitSimulation.simulate-Tuple{GLMTrait}","page":"Trait Simulation Tutorial","title":"TraitSimulation.simulate","text":"simulate(trait::GLMTrait)\n\nthis for GLM trait\n\n\n\n\n\n","category":"method"},{"location":"#TraitSimulation.simulate-Tuple{LMMTrait}","page":"Trait Simulation Tutorial","title":"TraitSimulation.simulate","text":"this for LMMtrait\n\n\n\n\n\n","category":"method"},{"location":"#TraitSimulation.vcobjtuple-Tuple{Array{VarianceComponent,1}}","page":"Trait Simulation Tutorial","title":"TraitSimulation.vcobjtuple","text":"this is a test for vcobjtuple that is compatible with VarianceComponentModels.jl\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"In this notebook we show how to use the TraitSimulation.jl package to simulate traits from genotype data from unrelateds or families on user-specified Generalized Linear Models (GLMs) or Linear Mixed Models (LMMs), respectively.","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"The data we will be using is from the Mendel version 16[1] sample files. The data is described in examples under Option 28e in the Mendel Version 16 Manual Section 28.1,  page 279. It consists of simulated data where the two traits of interest have one contributing SNP and a sex effect.","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"We use the OpenMendel package SnpArrays.jl to read in the PLINK formatted SNP data. In example 2b, we follow Mendel Option 28e with the simulation parameters for Trait1 and Trait2 in Ped28e.out as shown below.","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"In both examples, you can specify your own arbitrary fixed effect sizes, variance components and simulation parameters as desired.","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"In the mathbfGenerating mathbfEffect mathbfSizes Section of Example 2), we show how the user can generate effect sizes that depend on the minor allele frequencies from a function such as an exponential or chisquare. To aid the user when they wish to include a large number of loci in the model, we created a function that automatically writes out the mean components. ","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"mathbfAT","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"mathbfTHE mathbfEND mathbfof mathbfExample mathbf1, we demo how to mathbfwrite mathbfthe mathbfresults of each simulation to a file on the users own machine.","category":"page"},{"location":"#Double-check-that-you-are-using-Julia-version-1.0.3-or-higher-by-checking-the-machine-information-1","page":"Trait Simulation Tutorial","title":"Double check that you are using Julia version 1.0.3 or higher by checking the machine information","text":"","category":"section"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"versioninfo()","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"Julia Version 1.0.3\nCommit 099e826241 (2018-12-18 01:34 UTC)\nPlatform Info:\n  OS: macOS (x86_64-apple-darwin14.5.0)\n  CPU: Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-6.0.0 (ORCJIT, skylake)","category":"page"},{"location":"#Add-any-missing-packages-needed-for-this-tutorial:-1","page":"Trait Simulation Tutorial","title":"Add any missing packages needed for this tutorial:","text":"","category":"section"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"Note: For demonstration purposes, the generation of this Jupyter Notebook requires the use of the following registered packages: DataFrames.jl, SnpArrays.jl, StatsModels.jl, Random.jl, DelimitedFiles.jl, StatsBase.jl, and StatsFuns.jl. ","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"If it is your first time using these registered packages, you will first have to add the registered packages: DataFrames, SnpArrays, StatsModels, Random, LinearAlgebra, DelimitedFiles, Random, StatsBase by running the following code chunk in Julia's package manager:","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"pkg> add DataFrames pkg> add SnpArrays ... pkg> add StatsFuns","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"You can also use the package manager to add the TraitSimulation.jl package by running the following link: </br>","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"pkg> add \"https://github.com/sarah-ji/TraitSimulation.jl\"","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"Only after all of the necessary packages have been added, load them into your working environment with the using command:","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"using DataFrames, SnpArrays, StatsModels, Random, LinearAlgebra, DelimitedFiles, StatsBase, TraitSimulation, StatsFuns","category":"page"},{"location":"#Reproducibility-1","page":"Trait Simulation Tutorial","title":"Reproducibility","text":"","category":"section"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"For reproducibility, we set a random seed using the Random.jl package for each simulation using Random.seed!(1234).  If you wish to end up with different data, you will need to comment out these commands or use another value in Random.seed!().","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"Random.seed!(1234);","category":"page"},{"location":"#The-notebook-is-organized-as-follows:-1","page":"Trait Simulation Tutorial","title":"The notebook is organized as follows:","text":"","category":"section"},{"location":"#Example-1:-Generalized-Linear-Model-1","page":"Trait Simulation Tutorial","title":"Example 1: Generalized Linear Model","text":"","category":"section"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"In this example we show how to generate single or multiple traits from GLM's with a genetic variant in the fixed effects, but no residual familial correlation.","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"textvec(Y) sim textNomral(X B Sigma_1 otimes V_1 + cdots + Sigma_m otimes V_m)","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"where otimes is the Kronecker product.","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"In this model, data is represented by  ","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"Y: n x d response matrix  \nX: n x p covariate matrix  \nV=(V1,...,Vm): a tuple m n x n covariance matrices  ","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"and parameters are  ","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"B: p x d mean parameter matrix  \nΣ=(Σ1,...,Σm): a tuple of m d x d variance components  ","category":"page"},{"location":"#(a)-Single-Trait:-1","page":"Trait Simulation Tutorial","title":"(a) Single Trait:","text":"","category":"section"},{"location":"#Y_{1}-N(\\mu_{1},-\\sigma{2})-1","page":"Trait Simulation Tutorial","title":"Y_1  N(mu_1 sigma^2)","text":"","category":"section"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"In example (1a) we simulate a textbfSINGLE INDEPENDENT NORMAL TRAIT, with simulation parameters: mu_1 = 20 + 3*sex - 15*locus, sigma^2 = 2","category":"page"},{"location":"#(b)-Multiple-Independent-Traits:-1","page":"Trait Simulation Tutorial","title":"(b) Multiple Independent Traits:","text":"","category":"section"},{"location":"#:-Y-1","page":"Trait Simulation Tutorial","title":"$ Y =","text":"","category":"section"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"\\begin{bmatrix} Y{1}\\\nY{2} \\end{bmatrix}, Y{1} !\\perp!!!\\perp Y{2}$  &nbsp; &nbsp;   $ Y{1} ∼ N(\\mu{1}, 2), \\mu{1} = 40 + 3(sex) - 1.5(locus), Y{2} ∼ Poisson(\\mu{1}), \\mu{1} = 2 + 2(sex) - 1.5(locus))$","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"In example (1b) we simulate textbfTWO INDEPENDENT TRAITS SIMULTANEOUSLY, one from a Normal distribution and one from a Poisson distribution.<br>","category":"page"},{"location":"#Example-2:-Linear-Mixed-Model-1","page":"Trait Simulation Tutorial","title":"Example 2: Linear Mixed Model","text":"","category":"section"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"In this example we show how to generate data with the additional additive genetic variance component or residual correlation among relatives. ","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"For convenience we use the common assumption that the residual covariance among two relatives can be captured by the additive genetic variance times twice the kinship coefficient. However, if you like you can specify your own variance components and their design matrices as long as they are positive semi definite using the @vc macro demonstrated in this example. ","category":"page"},{"location":"#(a)-Single-Trait:-2","page":"Trait Simulation Tutorial","title":"(a) Single Trait:","text":"","category":"section"},{"location":"#Y_{1}-N(\\mu_{1},-4*-2GRM-2I)-1","page":"Trait Simulation Tutorial","title":"Y_1  N(mu_1 4* 2GRM + 2I)","text":"","category":"section"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"In example (1a) we simulate a textbfSINGLE TRAIT CONTROLLING FOR FAMILY STRUCTURE, with the corresponding Mendel Example 28e Simulation parameters, location : mu_1 = 40 + 3*sex - 15*locus, scale : V =  V_a_11* 2GRM + V_e_1 1I_n = 4* 2GRM + 2I. ","category":"page"},{"location":"#(b)-Multiple-Correlated-Traits:-(Mendel-Example-28e-Simulation)-1","page":"Trait Simulation Tutorial","title":"(b) Multiple Correlated Traits: (Mendel Example 28e Simulation)","text":"","category":"section"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"$","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"Y =  \\begin{bmatrix} Y{1}\\\nY{2} \\end{bmatrix}, Y{1} \\not!\\perp!!!\\perp Y{2} $","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"Y sim N(mathbfmuSigma  = V_a otimes (2GRM) + V_e otimes I_n) ","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"\nmathbfmu = beginbmatrix\nmu_1 \nmu_2 \nendbmatrix\n= beginbmatrix\n40 + 3(sex) - 15(locus)\n20 + 2(sex) - 15(locus)\nendbmatrix  V_a = beginbmatrix\n4  1\n1  4\nendbmatrix  V_e \n= beginbmatrix\n2  0\n0  2\nendbmatrix\n\n\n\nWe simulate textbfTWO CORRELATED TRAITS CONTROLLING FOR FAMILY STRUCTURE with simulation parameters location = mu and scale = Sigma \n\n\n Example 3 Rare Variant Linear Mixed Model \n\nThe example also assumes an additive genetic variance component in the model which includes 20 rare SNPs defined as snps with minor allele frequencies greater than 0002 but less than 002  In practice rare SNPs have smaller minor allele frequencies but we are limited in this tutorial by the number of individuals in the data set br\n\nWe simulate a Single normal Trait controlling for family structure with effect sizes generated as a function of the minor allele frequencies\n\n  Y_2  N(mu_rare20 4* 2GRM + 2I)\n\n\n Reading the Mendel 28a data using SnpArrays\n\nFirst use SnpArraysjl to read in the SNP data\n\n\n\njulia\nsnpdata = SnpArray(traitsim28ebed 212)\n\n\n\n\n\n    212253141 SnpArray\n     0x03  0x03  0x00  0x03  0x03  0x03    0x02  0x02  0x00  0x00  0x03  0x00\n     0x03  0x03  0x00  0x02  0x02  0x03     0x00  0x03  0x00  0x00  0x03  0x00\n     0x03  0x03  0x00  0x03  0x03  0x03     0x03  0x02  0x00  0x00  0x03  0x00\n     0x03  0x03  0x00  0x03  0x03  0x03     0x02  0x03  0x00  0x00  0x03  0x00\n     0x03  0x03  0x00  0x03  0x03  0x03     0x00  0x03  0x00  0x00  0x03  0x00\n     0x03  0x03  0x00  0x03  0x03  0x03    0x00  0x00  0x00  0x00  0x00  0x03\n     0x03  0x02  0x00  0x03  0x03  0x03     0x02  0x03  0x00  0x03  0x00  0x03\n     0x03  0x03  0x00  0x03  0x03  0x03     0x02  0x03  0x00  0x03  0x00  0x03\n     0x03  0x02  0x00  0x03  0x03  0x03     0x02  0x02  0x00  0x02  0x00  0x03\n     0x03  0x02  0x00  0x03  0x03  0x03     0x03  0x03  0x00  0x03  0x00  0x03\n     0x03  0x02  0x00  0x03  0x03  0x03    0x00  0x02  0x00  0x02  0x00  0x03\n     0x03  0x03  0x00  0x03  0x03  0x03     0x00  0x02  0x00  0x02  0x00  0x03\n     0x03  0x02  0x00  0x03  0x03  0x03     0x02  0x02  0x00  0x02  0x00  0x03\n                                                                         \n     0x03  0x03  0x00  0x03  0x03  0x03    0x00  0x03  0x00  0x00  0x03  0x00\n     0x03  0x03  0x00  0x03  0x03  0x03     0x00  0x03  0x00  0x02  0x02  0x02\n     0x03  0x03  0x00  0x03  0x03  0x03     0x00  0x02  0x00  0x00  0x03  0x00\n     0x03  0x02  0x00  0x02  0x02  0x03     0x02  0x03  0x00  0x03  0x00  0x03\n     0x03  0x03  0x00  0x02  0x02  0x03     0x02  0x03  0x00  0x00  0x03  0x00\n     0x03  0x03  0x00  0x03  0x03  0x03    0x02  0x03  0x00  0x02  0x02  0x00\n     0x03  0x03  0x00  0x02  0x02  0x03     0x02  0x03  0x00  0x00  0x02  0x02\n     0x03  0x03  0x00  0x03  0x03  0x03     0x00  0x03  0x00  0x00  0x03  0x00\n     0x03  0x02  0x00  0x03  0x03  0x03     0x02  0x03  0x00  0x00  0x02  0x02\n     0x03  0x03  0x00  0x03  0x03  0x03     0x00  0x03  0x00  0x00  0x03  0x00\n     0x03  0x03  0x00  0x03  0x03  0x03    0x02  0x03  0x00  0x00  0x03  0x00\n     0x03  0x03  0x00  0x03  0x03  0x03     0x00  0x03  0x00  0x02  0x02  0x02\n\n\n\nStore the FamID and PersonID of Individuals in Mendel 28e data\n\n\njulia\nfamfile = readdlm(traitsim28efam )\nFam_Person_id = DataFrame(FamID = famfile 1 PID = famfile 2)\n\n\n\n\n\nNote Because later we will want to compare our results to the original results in the file  we subset traits_original \n\n\njulia\ntraits_original = DataFrame(Trait1 = famfile 7 Trait2 = famfile 8)\n\n\nTransform sex variable from MF to 1-1 as does Mendel 28e data  If you prefer you can use the more common convention of making one of the sexes the reference sex (coding it as zero) and make the other sex have the value 1\n\n\njulia\nsex = map(x - strip(x) == F  -10  10 famfile 5)  note julias ternary operator \n\n\n\n\n\n    212-element ArrayFloat641\n     -10\n     -10\n      10\n      10\n     -10\n     -10\n      10\n      10\n     -10\n      10\n     -10\n      10\n     -10\n        \n      10\n      10\n      10\n     -10\n      10\n      10\n      10\n      10\n      10\n      10\n      10\n      10\n\n\n\n Names of Variants\n\nWe want to find the index of the causal snp rs10412915 in the snp_definition file and then subset that snp from the genetic marker data above \nWe first subset the SNP names into a vector called snpid\n\n\njulia\nsnpdef28_1 = readdlm(traitsim28ebim Any header = false)\nsnpid = map(x - strip(string(x)) snpdef28_1 1)  strip mining in the data \n\n\n\n\n\n    253141-element ArraySubStringString1\n     rs3020701  \n     rs56343121 \n     rs143501051\n     rs56182540 \n     rs7260412  \n     rs11669393 \n     rs181646587\n     rs8106297  \n     rs8106302  \n     rs183568620\n     rs186451972\n     rs189699222\n     rs182902214\n                 \n     rs188169422\n     rs144587467\n     rs139879509\n     rs143250448\n     rs145384750\n     rs149215836\n     rs139221927\n     rs181848453\n     rs138318162\n     rs186913222\n     rs141816674\n     rs150801216\n\n\n\nWe first need to find the position of the snp rs10412915  If you wish to use another snp just change the rs number to another one that is found in the available genotype data for example rs186913222\n\n\njulia\nind_rs10412915 = findall(x - x == rs10412915 snpid)1\n\n\n\n\n\n    236074\n\n\n\nWe see that the causal snp rs10412915 is the 236074th variant in the snp dataset\n\nLets create a design matrix for the alternative model that includes sex and locus rs10412915\n\n\njulia\nlocus = convert(VectorFloat64 view(snpdata ind_rs10412915))\nX = DataFrame(sex = sex locus = locus)\n\n\n Example 1) Multiple Independent Traits User specified distributions\n\nHere I simulate two independent traits simultaneously one from a Normal distribution and the other from a Poisson Distribution \nWe create the following 3 vectors to specify the simulation parameters of the two independent traits \n\n dist_type_vector  link_type_vector  mean_formulas\n\n\nY_1b_1  N(mu_1b 2)  mu_1b = 40 + 3(sex) - 15(locus)\nY_1b_2  Poisson(mu_2b)  mu_2b = 2 + 2(sex) - 15(locus)\n\n\n\njulia\nfor multiple glm traits from different distributions\ndist_type_vector = NormalResponse(4) PoissonResponse()\nlink_type_vector = IdentityLink() LogLink()\n\nmean_formulas = 40 + 3(sex) - 15(locus) 2 + 2(sex) - 15(locus)\n\nMultiple_GLM_traits_model_NOTIID = Multiple_GLMTraits(mean_formulas X dist_type_vector link_type_vector)\nSimulated_GLM_trait_NOTIID = simulate(Multiple_GLM_traits_model_NOTIID)\n\n\njulia\ndescribe(Simulated_GLM_trait_NOTIID stats = mean std min q25 median q75 max eltype)\n\n\n Saving Simulation Results to Local Machine\n\nWrite the newly simulated trait into a comma separated (csv) file for later use Note that the user can specify the separator to t for tab separated or another separator of choice \n\nHere we output the simulated traits and covariates for each of the 212 individuals labeled by their pedigree ID and person ID\n\n\njulia\nTrait1_GLM = hcat(Fam_Person_id Simulated_GLM_trait_NOTIID X)\n\n\n\n\n\njulia\ncd(Users) change to home directory\nCSVwrite(Trait1_GLMcsv Trait1_GLM)\n\n\n\n\n\n    Trait1_GLMcsv\n\n\n\n Example 2 Linear Mixed Model (with additive genetic variance component)\nExamples 2a and 2c simulate single traits while Example 2b simulates two correlated traits\n\nWe make note that the user can extend the model in Example 2b to include more than 2 variance components using the vc macro\n\n\n The Variance Covariance Matrix\n\nRecall  E(mathbfGRM) = Phi\nbr\nWe use the SnpArraysjl(httpsgithubcomOpenMendelSnpArraysjl) package to find an estimate of the Kinship (Phi) the Genetic Relationship Matrix (GRM) \n\nWe will use the same values of mathbfGRM V_a and V_e for both the mixed effect example and for the rare variant example\n\nNote that the residual covariance among two relatives is the additive genetic variance V_a times twice the kinship coefficient Phi The kinship matrix is derived from the genetic relationship matrix (GRM) across the common SNPs with minor allele frequency at least 005\n\n\njulia\nGRM = grm(snpdata minmaf=005)\n\n\n\n\n\n    212212 ArrayFloat642\n      0498264     00080878    00164327      00246825    000181856\n      00080878    0498054    -00212599      -00285927   -00226525 \n      00164327   -00212599    0499442       -00219661   -000748536\n      0253627    -000160532   0282542        000612693  -000339125\n      0126098     0253365     0128931       -00158446   -000633959\n     -0014971    -000266073  -000243384     000384757   00145936 \n     -00221357    00100492   -00107012      -00148443   -000127783\n     -001629     -000749253  -0015372       -00163305   -000258392\n     -0016679     000353587  -00128844      -00332489   -000707839\n     -00176101   -000996912  -00158473      -000675875  -00122339 \n     -00162558    000938592   00064231     -000510882   00168778 \n     -00167487    000414544  -000936538     -00134863    00020952 \n     -0031148     000112387  -0010794        000383105   00198635 \n                                                                    \n     -000865735  -000335548  -00148433      000806601  -00211537 \n      000296028   00043655   -00183683       00012496    000898193\n     -00204601   -00270898   -000194048     -00185883   -00116621 \n     -00174561   -00128509   -00155773      -00274183   -00063823 \n     -000170995   00154211   -000168146     -000684865  -00067438 \n      000718047  -000525265  -000283975     00309601    00261103 \n     -00170218   -000661916   00020924      -0022858     00037451 \n      00142551    00208073    00096287       000598877   00094809 \n     -000586031  -000733706   00339257       00109116   -00177771 \n      000299024  -00134027    00150825       000799507   00150077 \n      00246825   -00285927   -00219661      0593999     00497083 \n      000181856  -00226525   -000748536      00497083    0491743  \n\n\n\n\njulia\nV_A = 4 1 1 4\nV_E = 20 00 00 20\nI_n = MatrixFloat64(I size(GRM))\n\n\n Example 2a Single Trait \n\nY_2a  N(μ_1 4* 2GRM + 2I)","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"We simulate a Normal Trait controlling for family structure, location = mu_1 and scale =  mathbfV = 2*V_a Phi + V_e I = 4* 2GRM + 2I. ","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"mean_formula = [\"40 + 3(sex) - 1.5(locus)\"]","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"1-element Array{String,1}:\n \"40 + 3(sex) - 1.5(locus)\"","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"Ex2a_model = LMMTrait(mean_formula, X, 4*(2*GRM) + 2*(I_n))\ntrait_2a = simulate(Ex2a_model)","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"describe(trait_2a, stats = [:mean, :std, :min, :q25, :median, :q75, :max, :eltype])","category":"page"},{"location":"#Example-2b)-Multiple-Correlated-Traits:-(Mendel-Example-28e-Simulation)-1","page":"Trait Simulation Tutorial","title":"Example 2b) Multiple Correlated Traits: (Mendel Example 28e Simulation)","text":"","category":"section"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"We simulate two correlated Normal Traits controlling for family structure, location = μ and scale = mathbfSigma. The corresponding variance covariance matrix as specified Mendel Option 28e, mathbfΣ, is generated here.","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"\nY_2b  N(μ mathbfSigma)\n \n\n\nmathbfmu = beginvmatrix\nmu_1 \nmu_2 \nendvmatrix\n= beginvmatrix\n40 + 3(sex) - 15(locus)\n20 + 2(sex) - 15(locus)\nendvmatrix\n\n\n\n\nmathbfSigma  = V_a otimes (2GRM) + V_e otimes I_n\n\n\n\nnbsp FYI To create a trait with different variance components change the elements of mathbfSigma We create the variance component object variance_formula below to simulate our traits in example 2b While this tutorial only uses 2 variance components we make note that the vc macro is designed to handle as many variance components as needed \n\nAs long as each Variance Component is specified correctly we can create a VarianceComponent Julia object for Trait Simulation\n\nnbsp \nExample) Specifying more than 2 variance components (let V_B indicate an additional Environmental Variance component) \njulia\nmultiple_variance_formula = vc V_A  GRM + V_E1  I_n + V_E2  I_n + V_E3  I_n\n\n\n\n\njulia\n vc is a macro that creates a VarianceComponent Type for simulation\nvariance_formula = vc V_A  GRM + V_E  I_n\n\n\nThese are the formulas for the fixed effects as specified by Mendel Option 28e\n\n\njulia\nmean_formulas = 40 + 3(sex) - 15(locus) 20 + 2(sex) - 15(locus)\n\n\n\n\n\n    2-element ArrayString1\n     40 + 3(sex) - 15(locus)\n     20 + 2(sex) - 15(locus)\n\n\n\n\njulia\nEx2b_model = LMMTrait(mean_formulas X variance_formula)\ntrait_2b = simulate(Ex2b_model)\n\n\n\n Summary Statistics of Our Simulated Traits\n\n\njulia\ndescribe(trait_2b stats = mean std min max eltype)\n\n\n\n Summary Statistics of the Original Mendel 28e dataset Traits\n\nNote we want to see similar values from our simulated traits\n\n\njulia\ndescribe(traits_original stats = mean std min max eltype)\n\n\n\n Example 2c) Rare Variant Linear Mixed Model with effect sizes as a function of the allele frequencies \n\n\n\nY_2c  N(mu_rare20 4* 2GRM + 2I)\n\n\nIn this example we first subset only the rare SNPs with minor allele frequency greater than 0002 but less than 002 then we simulate traits on 20 of the rare SNPs as fixed effects For this demo the indexing snpidrare_index1240 allows us to subset every other rare snp in the first 40 SNPs to get our list of 20 rare SNPs Change the range and number of SNPs to simulate with more or less SNPs and from different regions of the genome The number 20 is arbitrary and you can use more or less than 20 if you desire by changing the final number You can change the spacing of the snps by changing the second number \nFor example snpidrare_index15500 would give you 100 snps\n\nHere are the 20 SNPs that will be used for trait simulation in this example  \n\n\n\njulia\n filter out rare SNPS get a subset of uncommon SNPs with 0002  MAF  002\nminor_allele_frequency = maf(snpdata)\nrare_index = (0002  minor_allele_frequency  002)\ndata_rare = snpdata rare_index\n\n\n\njulia\nmaf_20_rare_snps = minor_allele_frequencyrare_index1240\nrare_snps_for_simulation = snpidrare_index1240\n\n\n\n\n\n    20-element ArraySubStringString1\n     rs3020701  \n     rs181646587\n     rs182902214\n     rs184527030\n     rs10409990 \n     rs185166611\n     rs181637538\n     rs186213888\n     rs184010370\n     rs11667161 \n     rs188819713\n     rs182378235\n     rs146361744\n     rs190575937\n     rs149949827\n     rs117671630\n     rs149171388\n     rs188520640\n     rs142722885\n     rs146938393\n\n\n\n Generating Effect Sizes\n\nIn practice rare SNPs have smaller minor allele frequencies but we are limited in this tutorial by the number of individuals in the data set We use generated effect sizes to evaluate mu_rare20 on the following Dataframe br \n\n\njulia\ngeno_rare20_converted = convert(DataFrame convert(MatrixFloat64 view(data_rare 1240)))\nnames(geno_rare20_converted Symbol(rare_snps_for_simulation))\n\n\n\n Chisquared Distribution (df = 1)\n\n Generating Effect Sizes Based on MAF\n\nFor demonstration purposes we simulate effect sizes from the Chi-squared(df = 1) distribution where we use the minor allele frequency (maf) as x and find f(x) where f is the pdf for the Chi-squared (df = 1) density so that the rarest SNPs have the biggest effect sizes The effect sizes are rounded to the second digit throughout this example Notice there is a random +1 or -1 so that there are effects that both increase and decrease the simulated trait value\n\nIn addition to the Chi-Squared distribution we also demo how to simulate from the Exponential distribution where we use the minor allele frequency (maf) as x and find f(x) where f is the pdf for the Exponential density\n\n\njulia\n Generating Effect Sizes from Chisquared(df = 1) density\nn = length(maf_20_rare_snps)\nchisq_coeff = zeros(n)\n\nfor i in 1n\n    chisq_coeffi = sign(rand() - 5) * chisqpdf(1 maf_20_rare_snpsi)50\nend\n\n\nTake a look at the simulated coefficients on the left next to the corresponding minor allele frequency Notice the rarer SNPs have the largest absolute values for their effect sizes\n\n\njulia\nEx2c_rare = round(chisq_coeff maf_20_rare_snps digits = 3)\nEx2c_rare = DataFrame(Chisq_Coefficient = Ex2c_rare 1  MAF_rare = Ex2c_rare 2 )\n\n\n\n\njulia\nsimulated_effectsizes_chisq = Ex2c_rare 1\n\n\n\n\n\n    20-element ArrayFloat641\n     -0616\n     -0666\n     -0818\n     -0575\n      0818\n      1159\n     -0945\n     -0818\n      0945\n     -1641\n     -0666\n      1159\n      1641\n     -1159\n     -0575\n      1641\n      1641\n     -1641\n      0575\n     -1159\n\n\n\n Exponential Distribution\nHere we show how to generate effect sizes for the 20 rare snps from the Exponential Distribution where we use the maf as x and find f(x) where f is the pdf for the Exponential density\n\n\njulia\nsimulated_effectsizes_exp = round(6*exp(-200*maf_20_rare_snps) digits = 3)\n\n\n\n\n\n    20-element ArrayFloat641\n     0221\n     0354\n     0909\n     0138\n     0909\n     2336\n     1457\n     0909\n     1457\n     3744\n     0354\n     2336\n     3744\n     2336\n     0138\n     3744\n     3744\n     3744\n     0138\n     2336\n\n\n\n Function for Mean Model Expression\n\nIn some cases a large number of variants may be used for simulation Thus in this example we create a function where the user inputs a vector of coefficients and a vector of variants for simulation then the function outputs the mean model expression \n\nThe function FixedEffectTerms creates the proper evaluated expression for the simulation process using the specified vectors of coefficients and snp names The function outputs evaluated_fixed_expression which will be used to estimate the mean effect μ in our mixed effects model We make use of this function in this example instead of having to write out all 20 of the coefficients and variant locus names\n\n\njulia\nrare_snps_for_simulation\n\n\n\n\n\n    20-element ArraySubStringString1\n     rs3020701  \n     rs181646587\n     rs182902214\n     rs184527030\n     rs10409990 \n     rs185166611\n     rs181637538\n     rs186213888\n     rs184010370\n     rs11667161 \n     rs188819713\n     rs182378235\n     rs146361744\n     rs190575937\n     rs149949827\n     rs117671630\n     rs149171388\n     rs188520640\n     rs142722885\n     rs146938393\n\n\n\n\njulia\nfunction FixedEffectTerms(effectsizesAbstractVecOrMat snpsAbstractVecOrMat)\n  implementation\n    fixed_terms = \nfor i in 1length(simulated_effectsizes_chisq) - 1\nexpression =  +  * string(simulated_effectsizes_chisqi) * ( * rare_snps_for_simulationi * )\n    fixed_terms = fixed_terms * expression\nend\n    return String(fixed_terms)\nend\n\n\n\n\n\n\n    FixedEffectTerms (generic function with 1 method)\n\n\n\n\njulia\nmean_formula_rare = FixedEffectTerms(simulated_effectsizes_chisq rare_snps_for_simulation)\n\n\n\n\n\n     + -0616(rs3020701) + -0666(rs181646587) + -0818(rs182902214) + -0575(rs184527030) + 0818(rs10409990) + 1159(rs185166611) + -0945(rs181637538) + -0818(rs186213888) + 0945(rs184010370) + -1641(rs11667161) + -0666(rs188819713) + 1159(rs182378235) + 1641(rs146361744) + -1159(rs190575937) + -0575(rs149949827) + 1641(rs117671630) + 1641(rs149171388) + -1641(rs188520640) + 0575(rs142722885)\n\n\n\n Example 2c) Mixed effects model Single Trait and rare variants\n\nY_2c  N(μ_20raresnps 4* 2GRM + 2I)","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"rare_20_snp_model = LMMTrait([mean_formula_rare], geno_rare20_converted, 4*(2*GRM) + 2*(I_n))\ntrait_rare_20_snps = simulate(rare_20_snp_model)","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"describe(trait_rare_20_snps, stats = [:mean, :std, :min, :max, :eltype])","category":"page"},{"location":"#Saving-Simulation-Results-to-Local-Machine-1","page":"Trait Simulation Tutorial","title":"Saving Simulation Results to Local Machine","text":"","category":"section"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"Here we output the simulated trait values for each of the 212 individuals, labeled by their pedigree ID and person ID.","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"In addition, we output the genotypes for the variants used to simulate this trait.","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"Trait2_mixed = hcat(Fam_Person_id, trait_rare_20_snps, geno_rare20_converted)","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"Coefficients = DataFrame(Coefficients = simulated_effectsizes_chisq)\nSNPs_rare = DataFrame(SNPs = rare_snps_for_simulation)\nTrait2_mixed_sim = hcat(Coefficients, SNPs_rare)","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"#cd(\"/Users\") #change to home directory\nusing CSV\nCSV.write(\"Trait2c_mixed.csv\", Trait2_mixed)\nCSV.write(\"Trait2c_mixed_sim.csv\", Trait2_mixed_sim);","category":"page"},{"location":"#Citations:-1","page":"Trait Simulation Tutorial","title":"Citations:","text":"","category":"section"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"[1] Lange K, Papp JC, Sinsheimer JS, Sripracha R, Zhou H, Sobel EM (2013) Mendel: The Swiss army knife of genetic analysis programs. Bioinformatics 29:1568-1570.`","category":"page"},{"location":"#","page":"Trait Simulation Tutorial","title":"Trait Simulation Tutorial","text":"[2] OPENMENDEL: a cooperative programming project for statistical genetics. Hum Genet. 2019 Mar 26. doi: 10.1007/s00439-019-02001-z.","category":"page"}]
}
